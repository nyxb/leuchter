import { promises as fs } from 'node:fs'
import consolji from 'consolji'
import { languages } from './languages.mjs'

async function updateLibData() {
   const aliasOrIdToScope = {}
   languages.forEach((language) => {
      aliasOrIdToScope[language.id] = language.scopeName;
      (language.aliases || []).forEach((alias) => {
         aliasOrIdToScope[alias] = language.scopeName
      })
   })

   const scopeToLanguageData = {}
   languages.forEach((language) => {
      scopeToLanguageData[language.scopeName] = {
         id: language.id,
         path: language.path,
         embeddedScopes: getDependentLangs(language.id).map(l => l.scopeName),
      }
   })

   const nameList = languages.map(l => `\n  | "${l.id}"`).join('')
   const scopeList = languages.map(l => `\n  | "${l.scopeName}"`).join('')
   const content = `// generated by leuchter/scripts/3.update-languages-data.mjs

export const LANG_NAMES = ${JSON.stringify(
    Object.keys(aliasOrIdToScope),
    null,
    2,
  )};
type NamesTuple = typeof LANG_NAMES;
export type LanguageAlias = NamesTuple[number];
export type LanguageName = ${nameList};
export type ScopeName = ${scopeList};

export type LanguageData = {
  id: LanguageName;
  path: string;
  embeddedScopes: ScopeName[];
};
  
export const aliasOrIdToScope: Record<LanguageAlias, ScopeName> = ${JSON.stringify(
    aliasOrIdToScope,
    null,
    2,
  )};
export const scopeToLanguageData: Record<ScopeName, LanguageData> = ${JSON.stringify(
    scopeToLanguageData,
    null,
    2,
  )};
`

   await fs.writeFile('./src/language-data.ts', content, 'utf8')
}

function getDependentLangs(langId) {
   const language = languages.find(l => l.id === langId)

   if (!language)
      return []

   const idsToExpand = [language.id]
   const dependentLanguages = []

   while (idsToExpand.length) {
      const id = idsToExpand.shift()

      const alreadyExpanded = dependentLanguages.find(l => l.id === id)

      if (!alreadyExpanded) {
         const lang = languages.find(l => l.id === id)
         dependentLanguages.unshift(lang)
         if (lang.embeddedLangs)
            idsToExpand.push(...lang.embeddedLangs)
      }
   }

   return dependentLanguages.filter(l => l.id !== langId)
}

await updateLibData()

consolji.log('Updated leuchter/src/language-data.ts')
